# -*- coding: utf-8 -*-
"""HW1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y9-3NOn6Fbl46hWNx_Lhmgi5jZqzs6MO
"""

import pandas as pd
import statsmodels.api as sm
from datetime import datetime
import matplotlib.pyplot as plt 
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.stattools import adfuller
#from pmdarima import auto_arima
import warnings
import numpy as np
from statsmodels.tsa.arima_model import ARIMA
from sklearn.metrics import mean_absolute_error, mean_squared_error
from statsmodels.graphics.tsaplots import plot_acf, plot_pacf
#from nowcast_lstm.LSTM import LSTM
warnings.filterwarnings('ignore')
import pandas as pd
import numpy as np
from fbprophet import Prophet
from matplotlib import pyplot as plt
import logging
logging.getLogger('fbprophet').setLevel(logging.WARNING)

path_file = "本年度每日尖峰備轉容量率.csv"
data = pd.read_csv(path_file)
data = pd.DataFrame(data)
data = data.loc[:,['date','capacity']]
#data.columns=['date','capacity']

'''change datetime format'''
for index in range(len(data['date'])):
    index_time = str(data['date'][index])
    time_change = datetime.strptime(index_time,"%Y/%m/%d").date()
    data['date'][index] = time_change
data['capacity'] *= 10


path_file = "近三年每日尖峰備轉容量率.csv"
data_1 = pd.read_csv(path_file)
data_1 = pd.DataFrame(data_1)
data_1 = data_1.loc[:,['日期','備轉容量(MW)']]
data_1.columns=['date','capacity']

'''change datetime format'''
for index in range(len(data_1['date'])):
    index_time = str(data_1['date'][index])
    time_change = datetime.strptime(index_time,"%Y/%m/%d").date()
    data_1['date'][index] = time_change
data_1['capacity'] *= 10

df_cat =  pd.concat([data_1,data])
df_cat.columns=['ds','y']
df_cat = df_cat.reset_index()
df_cat = df_cat.loc[:,['ds']]

df_cat

path_file = "training.csv"
train = pd.read_csv(path_file)
#train.columns=["open", "high", "low", "close"]
path_file = "testing.csv"
test = pd.read_csv(path_file)
#est.columns=["open", "high", "low", "close"]
df_cat_1 =  pd.concat([train,test])

test

df = df_cat_1[1508-1180:]

df

df = df.reset_index()
df = df.loc[:,["open","high","low","close"]]

df

df_time = pd.concat([df,df_cat],axis=1)
#df_time = df_time.loc[:,["open","ds"]]
#df_time.columns=["y","ds"]
df_time.columns=["open","high","low","close","date"]

df = df_time

def relative_strength_idx(df, n=14):
    close = df['close']
    delta = close.diff()
    delta = delta[1:]
    pricesUp = delta.copy()
    pricesDown = delta.copy()
    pricesUp[pricesUp < 0] = 0
    pricesDown[pricesDown > 0] = 0
    rollUp = pricesUp.rolling(n).mean()
    rollDown = pricesDown.abs().rolling(n).mean()
    rs = rollUp / rollDown
    rsi = 100.0 - (100.0 / (1.0 + rs))
    return rsi

# SMA
df['EMA_3'] = df['close'].ewm(3).mean().shift()
df['EMA_7'] = df['close'].ewm(7).mean().shift()
df['EMA_30'] = df['close'].ewm(30).mean().shift()

# EMA
df['SMA_3'] = df['close'].rolling(3).mean().shift()
df['SMA_7'] = df['close'].rolling(7).mean().shift()
df['SMA_30'] = df['close'].rolling(30).mean().shift()

# RSI
df['RSI'] = relative_strength_idx(df).fillna(0)

# MACD
EMA_12 = pd.Series(df['close'].ewm(span=12, min_periods=12).mean())
EMA_26 = pd.Series(df['close'].ewm(span=26, min_periods=26).mean())
df['MACD'] = pd.Series(EMA_12 - EMA_26)
df['MACD_signal'] = pd.Series(df.MACD.ewm(span=9, min_periods=9).mean())

df['y'] = df['close'].shift(-1)
df = df.dropna(axis=0).reset_index(drop=True)

df

from fbprophet import Prophet
features = ['SMA_3','SMA_7','SMA_30','EMA_3','EMA_7','EMA_30','RSI','MACD','MACD_signal']
df_train = df[:-20]
df_valid = df[-20:]
model_fbp = Prophet()
for feature in features:
    model_fbp.add_regressor(feature)

model_fbp.fit(df_train[["date", "y"] + features].rename(columns={"date": "ds", "y": "y"}))
forecast = model_fbp.predict(df_valid[["date", "y"] + features].rename(columns={"date": "ds"}))
df_valid["Forecast_Prophet"] = forecast.yhat.values

ans = df_valid["Forecast_Prophet"].values.tolist()

ans_l = [] 
tmp = 0
for i in range(len(ans)-2):
  if ans[i+2]>ans[i+1]:
    if tmp != 1:
      ans_l.append(1)
      tmp = 1 
    else:
      ans_l.append(0)
  else:
    if tmp != -1:
      ans_l.append(-1)
      tmp = -1 
    else:
      ans_l.append(0)
ans_l.append(0)

ans_l